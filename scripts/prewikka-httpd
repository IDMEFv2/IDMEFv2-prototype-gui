#!/usr/bin/env python

# Copyright (C) 2004-2021 CS GROUP - France. All Rights Reserved.
# Author: Nicolas Delon <nicolas.delon@prelude-ids.com>
#
# This file is part of the Prewikka program.
#
# SPDX-License-Identifier: BSD-2-Clause
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIEDi
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import argparse
import locale
import multiprocessing
import socket
import ssl
import sys

from wsgiref.simple_server import WSGIRequestHandler, WSGIServer, make_server

from prewikka import localization, main, siteconfig, version
from prewikka.web import wsgi

global options


class WSGIRequest(WSGIRequestHandler):
    def log_message(self, format, *args):
        pass


class MyWSGIServer(WSGIServer):
    def handle_error(self, request, client_address):
        exc_type, exc_value = sys.exc_info()[:2]
        if issubclass(exc_type, socket.error) and exc_value.args[0] == 32:  # EPIPE
            return

        WSGIServer.handle_error(self, request, client_address)

    def serve_forever(self):
        # Preload Prewikka server
        main.Core.from_config(options.config)

        try:
            WSGIServer.serve_forever(self)
        except KeyboardInterrupt:
            pass


def application(environ, start_response):
    environ["PREWIKKA_CONFIG"] = options.config

    if options.root:
        if not environ['PATH_INFO'].startswith(options.root):
            start_response('301 Redirect', [('Location', options.root), ])
            return []

        environ['SCRIPT_NAME'] = options.root[:-1]
        environ['PATH_INFO'] = environ['PATH_INFO'][len(options.root) - 1:]

    return wsgi.application(environ, start_response)


def set_locale(lang):
    if lang[0] not in localization.get_languages():
        lang = "en_GB.utf8"
    else:
        lang = ".".join(lang)

    localization.translation.set_locale(lang)


if __name__ == "__main__":
    set_locale(locale.getdefaultlocale())

    parser = argparse.ArgumentParser(add_help=False)

    parser.add_argument("-r", "--root", help=_("root where the server is accessible"))
    parser.add_argument("-a", "--address", default="0.0.0.0", help=_("IP to bind to (default: %(default)s)"))
    parser.add_argument("-p", "--port", type=int, default=8000, help=_("port number to use (default: %(default)d)"))
    parser.add_argument("--key", help=_("SSL private key to use (default: no SSL)"))
    parser.add_argument("--cert", help=_("SSL certificate to use (default: no SSL)"))
    parser.add_argument("-c", "--config", default="%s/prewikka.conf" % siteconfig.conf_dir, help=_("configuration file to use (default: %(default)s)"))
    parser.add_argument("-m", "--multiprocess", type=int, default=multiprocessing.cpu_count(),
                        help=_("number of processes to use. Default value matches the number of available CPUs (i.e. %d)") % multiprocessing.cpu_count())
    parser.add_argument("-h", "--help", action="help", help=_("show this help message and exit"))
    parser.add_argument("-v", "--version", action="version", version=version.__version__, help=_("show program's version number and exit"))

    options = parser.parse_args()

    if options.root:
        options.root = "/%s/" % (options.root.strip("/"))

    server = make_server(options.address, options.port, application, server_class=MyWSGIServer, handler_class=WSGIRequest)
    if options.key and options.cert:
        server.socket = ssl.wrap_socket(server.socket, keyfile=options.key, certfile=options.cert, server_side=True)
        server.base_environ["HTTPS"] = "on"  # This is used by wsgiref to determine url_scheme

    for i in range(options.multiprocess - 1):
        p = multiprocessing.Process(target=server.serve_forever)
        p.daemon = True

        p.start()

    server.serve_forever()

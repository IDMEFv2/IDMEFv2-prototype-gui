#!/usr/bin/env python

# Copyright (C) 2017-2021 CS GROUP - France. All Rights Reserved.
# Author: Yoann Vandoorselaere <yoannv@gmail.com>
#
# This file is part of the Prewikka program.
#
# SPDX-License-Identifier: BSD-2-Clause
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIEDi
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import gevent.monkey
gevent.monkey.patch_all()

import argparse
import base64
import fcntl
import locale
import os
import signal
import sys

from prewikka import crontab, localization, main, siteconfig, version
from prewikka import FakeRequest


_LOCKFD = None
_LOCKFILE = None


def _get_lock_filename(options):
    return "/tmp/prewikka-crontab-%s.lock" % base64.urlsafe_b64encode(options.config)


def _handle_signal(signum, frame):
    env.log.info("received signal %d: terminating" % (signum))

    if _LOCKFILE:
        os.unlink(_LOCKFILE)

    sys.exit(0)


def _daemonize(options):
    global _LOCKFD, _LOCKFILE

    _LOCKFILE = _get_lock_filename(options)
    _LOCKFD = open(_LOCKFILE, 'w')
    try:
        fcntl.flock(_LOCKFD, fcntl.LOCK_EX | fcntl.LOCK_NB)

    except Exception:
        env.log.error("%s is already locked, is prewikka-crontab already running ?" % _LOCKFILE)
        raise

    ret = os.fork()
    if ret != 0:
        sys.exit(0)

    os.setsid()

    nd = open(os.devnull, 'rw')
    for i in ("stdin", "stdout", "stderr"):
        getattr(sys, i).close()
        setattr(sys, i, nd)

    os.umask(0o27)
    os.chdir('/')

    _LOCKFD.write('%s\n' % (os.getpid()))


def set_locale(lang):
    if lang[0] not in localization.get_languages():
        lang = "en_GB.utf8"
    else:
        lang = ".".join(lang)

    localization.translation.set_locale(lang)


if __name__ == "__main__":
    set_locale(locale.getdefaultlocale())

    parser = argparse.ArgumentParser(add_help=False)

    parser.add_argument("-c", "--config", default="%s/prewikka.conf" % siteconfig.conf_dir, help=_("configuration file to use (default: %(default)s)"))
    parser.add_argument("-d", "--daemon", action="store_true", help=_("run as a system daemon"))
    parser.add_argument("-h", "--help", action="help", help=_("show this help message and exit"))
    parser.add_argument("-v", "--version", action="version", version=version.__version__, help=_("show program's version number and exit"))

    options = parser.parse_args()

    if options.daemon:
        _daemonize(options)

    signal.signal(signal.SIGINT, _handle_signal)
    signal.signal(signal.SIGTERM, _handle_signal)

    # Setup the environment
    core = main.Core.from_config(options.config)
    env.request = FakeRequest()
    crontab.run(core)

#!/usr/bin/env python

# Copyright (C) 2019-2021 CS GROUP - France. All Rights Reserved.
# Author: Antoine Luong <antoine.luong@c-s.fr>
#
# This file is part of the Prewikka program.
#
# SPDX-License-Identifier: BSD-2-Clause
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIEDi
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import argparse
import cmd
import getpass
import glob
import io
import json
import locale
import logging
import os
import shlex
import sys

from prewikka import cli, localization, log, main, siteconfig, usergroup, utils, version
from prewikka import FakeRequest


COMMAND_ERROR = 1
PARSE_ERROR = 2
SYSTEM_ERROR = 3
UNEXPECTED_ERROR = 10


class PrewikkaCLI(cmd.Cmd):
    prompt = "(prewikka-cli) "
    _interactive = False

    def _complete_command(self, command, text, line):
        if len(line.split(" ")) != 2:
            return

        last_term = line.split(" ")[-1]
        offset = len(last_term) - len(text)
        return [category[offset:] for category in cli.get(command) if category.startswith(last_term)]

    def _do_command(self, command, category, *args, **kwargs):
        c = cli.get(command).get(category)
        if not c:
            print("*** %s" % _("Unknown command"))
            return COMMAND_ERROR

        method, permissions, help, options = c
        env.request.user.check(permissions)
        try:
            result = method(*args, **kwargs)
        except Exception as e:
            print("*** %s" % _("An unexpected error occurred: %s") % e)
            return UNEXPECTED_ERROR

        if command == "list":
            for elem in result:
                print(elem)

        return 0

    def _help_command(self, command, description):
        additional_help = []
        for category, (method, permissions, help, options) in sorted(cli.get(command).items()):
            if help:
                additional_help.append(_(help))

        print("\n".join(description + [" - %s" % h for h in additional_help]))

    def _get_option(self, command, category, option):
        c = cli.get(command).get(category)
        if not c:
            return None

        return c[-1].get(option)

    def complete_create(self, text, line, begidx, endidx):
        return self._complete_command("create", text, line)

    def complete_delete(self, text, line, begidx, endidx):
        return self._complete_command("delete", text, line)

    def complete_import(self, text, line, begidx, endidx):
        if len(line.split(" ")) < 3:
            return self._complete_command("import", text, line)

        path = line.split(" ")[-1]
        offset = len(path) - len(text)
        return [f[offset:] + (os.sep if os.path.isdir(f) else "") for f in glob.glob(path + "*")]

    def complete_list(self, text, line, begidx, endidx):
        return self._complete_command("list", text, line)

    def complete_sync(self, text, line, begidx, endidx):
        return self._complete_command("sync", text, line)

    def complete_update(self, text, line, begidx, endidx):
        return self._complete_command("update", text, line)

    def _parse_with_json(self, arg):
        data = {}
        idx = arg.find('{')
        while idx != -1:
            try:
                data = utils.json.loads(arg[idx:])
                if not isinstance(data, dict):
                    raise ValueError(data)
                arg = arg[:idx]
                break
            except json.JSONDecodeError:
                pass
            idx = arg.find('{', idx + 1)

        return shlex.split(arg), data

    def do_create(self, arg):
        try:
            (category, name), data = self._parse_with_json(arg)
        except ValueError:
            print("*** %s" % _("Could not parse input"))
            return PARSE_ERROR

        return self._do_command("create", category, name=name, data=data)

    def do_delete(self, arg):
        try:
            category, name = shlex.split(arg)
        except ValueError:
            print("*** %s" % _("Could not parse input"))
            return PARSE_ERROR

        return self._do_command("delete", category, name=name)

    def do_import(self, arg):
        args = shlex.split(arg)
        try:
            category = args[0]
            filenames = args[1:]
        except IndexError:
            print("*** %s" % _("Could not parse input"))
            return PARSE_ERROR

        files = []
        mode = "rb" if self._get_option("import", category, "mode") == "binary" else "r"

        for pattern in filenames:
            for path in glob.glob(pattern):
                with io.open(path, mode) as f:
                    files.append({
                        "name": os.path.basename(f.name),
                        "data": f.read()
                    })

        return self._do_command("import", category, files=files)

    def do_update(self, arg):
        try:
            (category,), data = self._parse_with_json(arg)
        except ValueError:
            print("*** %s" % _("Could not parse input"))
            return PARSE_ERROR

        return self._do_command("update", category, data=data)

    def _do_generic(cmd):
        def inner(self, arg):
            try:
                arg, = shlex.split(arg)
            except ValueError:
                print("*** %s" % _("Could not parse input"))
                return PARSE_ERROR
            return self._do_command(cmd, arg)
        return inner

    do_list = _do_generic("list")
    do_sync = _do_generic("sync")

    def help_create(self):
        return self._help_command("create", ["create <type> <name> <data>", _("Create an object of the specified type")])

    def help_delete(self):
        return self._help_command("delete", ["delete <type> <name>", _("Delete an object of the specified type")])

    def help_import(self):
        return self._help_command("import", ["import <type> <files...>", _("Import objects of the specified type from files")])

    def help_list(self):
        return self._help_command("list", ["list <type>", _("List objects of the specified type")])

    def help_sync(self):
        return self._help_command("sync", ["sync <type>", _("Synchronize objects of the specified type")])

    def help_update(self):
        return self._help_command("update", ["update <type> <data>", _("Update objects of the specified type")])

    def do_EOF(self, line):
        return True

    def get_names(self):
        # Hide not implemented actions from the list of commands
        return [name for name in cmd.Cmd.get_names(self) if not name.startswith(("do_", "help_")) or name.endswith("help") or cli.get(name.split("_")[-1])]

    def emptyline(self):
        pass

    def preloop(self):
        self._interactive = True

    def postcmd(self, stop, line):
        if line and line.strip() not in ("help", "?"):
            print()

        if self._interactive and not isinstance(stop, bool):
            # Do not exit on error in interactive mode
            return False

        return stop


def set_locale(lang):
    if lang[0] not in localization.get_languages():
        lang = "en_GB.utf8"
    else:
        lang = ".".join(lang)

    localization.translation.set_locale(lang)


if __name__ == "__main__":
    set_locale(locale.getdefaultlocale())

    parser = argparse.ArgumentParser(description=_("Prewikka command-line tool"))
    parser.add_argument("-u", "--user", default="admin", help=_("name of the user"))
    parser.add_argument("-c", "--config", default="%s/prewikka.conf" % siteconfig.conf_dir, help=_("configuration file to use (default: %(default)s)"))
    parser.add_argument("-C", "--command", help=_("command to execute"))
    parser.add_argument("-D", "--debug", action="store_true", help=_("enable debugging output"))

    args = parser.parse_args()
    interpreter = PrewikkaCLI()
    env.request = FakeRequest()

    if getpass.getuser() != "prewikka":
        print("*** %s" % _("prewikka-cli must be executed as the prewikka user"))
        sys.exit(SYSTEM_ERROR)

    main.Core.from_config(args.config, ignore_errors=False)
    env.request.user = env.auth.authenticate(args.user, no_password_check=True)
    env.request.user.set_locale()

    if args.debug:
        formatter = logging.Formatter('%(asctime)s prewikka-cli (pid:%(process)d) %(levelname)s: %(message)s', '%X')
        handler = logging.StreamHandler()
        handler.setLevel(logging.DEBUG)
        handler.setFormatter(formatter)
        env.log._logger.addHandler(handler)

    if args.command:
        ret = 0
        for command in args.command.split(";"):
            r = interpreter.onecmd(command) or 0
            if r > ret:
                ret = r

        sys.exit(ret)

    else:
        interpreter.cmdloop("\n".join([
            _("Prewikka command-line tool (%s)") % version.__version__,
            _("Type \"help\" or \"?\" to list commands"),
            ""
        ]))
